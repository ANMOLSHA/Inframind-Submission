# -*- coding: utf-8 -*-
"""CHATBOT SENTIMENT ANALYSIS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uFdtJKmJ1-2MW3qTeba2E6cMPtKV60Fm
"""

#0 Import libraries
import pandas as pd                     #Pandas is a useful library in data analysis. It can be used to perform data manipulation and analysis. 
import numpy as np                      #Using NumPy, mathematical and logical operations on arrays can be performed.
import seaborn as sns                   #Seaborn is a Python data visualization library based on matplotlib
import random                           #Generate pseudo-random numbers                   
from textblob import TextBlob           #TextBlob is a Python (2 and 3) library for processing textual data.
import nltk                             #the module NLTK is used for natural language processing.
from newspaper import Article           #Newspaper is a Python module used for extracting and parsing newspaper articles.
import matplotlib.pyplot as plt         #Matplotlib is an amazing visualization library in Python for 2D plots of arrays.
import sys, tweepy                      #twitter Api access

#1. Name and nickname conversation

print('Hello human what is your name ?')
name = input()
print('Do you have nickname ?')
ans = input()
if 'y' in ans.lower():
    nickname = input('what is your nickname: ')
    print('Good to meet you ' + nickname)
else:
    nickname = name
    print('I will call you '+nickname)

#2. Greeting selection
import matplotlib.pyplot as plt 
greetings = [
'How are you today ' + nickname +'?',
'Howdy ' + nickname + ' how are you feeling?',
"What's up " + nickname +'?',
'Greetings ' + nickname +', are you well?',
'How are things going ' + nickname +'?'
]
print(random.choice(greetings))
ans = input()
blob = TextBlob(ans)

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.axis('equal')
langs = ['POSITIVE VIEW', 'NEGATIVE VIEW', 'NEUTRAL VIEW']
if blob.polarity > 0:
  print('Glad you are doing well')
  print('Positive View Polarity ',blob.polarity)
  students = [blob.polarity,(1-blob.polarity)/2,(1-blob.polarity)/2]
elif blob.polarity < 0:
  print('Sorry to hear that ')
  print('Negative view Polarity ',blob.polarity)
  students = [((-1)-blob.polarity)/2,blob.polarity,((-1)-blob.polarity)/2]
else:
  students = [33.3,33.3,33.3]
  print('Nuteral view Polarity ',blob.polarity)
ax.pie(students, labels = langs,autopct='%1.2f%%')
plt.show()

#3. Several random opinions on Products
Products = [
'Chocolates',
'Wireless Phone Charger',
'Board Games',
'Laptops',
'Smart Watches',
'Alexa',
'Printers'
]

questions = [
'What is your take on ',
'What do you think about ',
'How do you feel about ',
'What do you reckon about ',
'I would like your opinion on '
]
for i in range(0, random.randint(3,4)):
    question = random.choice(questions)
    questions.remove(question)
    Product = random.choice(Products)
    Products.remove(Product)
    print(question + Product + '?')
    ans = input()
    blob = TextBlob(ans)
   
    if blob.polarity > 0.5:
        print('OMG you really love '+ Product)
        print('Positive View Polarity ',blob.polarity)
    elif blob.polarity > 0.1:
        print('Well, you clearly like '+ Product)
        print('Positive View Polarity ',blob.polarity)
    elif blob.polarity < 0:
        print('Woof, you totally hate '+ Product)
        print('Negative View Polarity ',blob.polarity)
    elif blob.polarity < -0.5:
        print('Woof, you totally hate '+ Product)
        print('Negative View Polarity ',blob.polarity)
    else:
        print('That is a very neutral view on '+ Product)
        print('Neutral View Polarity ',0)
        
  
    if blob.subjectivity > 0.6:
        print('and you are so biased')
    elif blob.subjectivity > 0.3:
        print('and you are a bit biased')
    else:
        print('and you are quite objective')

"""# New Section"""

#4. URL
print('Do you want me to Analyse Reviews Related to Product ?')
ans = input()
if 'y' in ans.lower():
        url = input("Enter URL To analyse the Reviews ")
        article=Article(url)
        article.download()
        article.parse()
        nltk.download('punkt')
        article.nlp()
        text=article.summary
        print(text)

        obj=TextBlob(text)
        sentiment=obj.sentiment.polarity
        print(sentiment)

        if sentiment == 0:
            print('That is a very Neutral Review')
        elif sentiment > 0:
            print('OMG Positive Review')
        else:
            print('Well, Reviews are clearly Negative ')
else:
  print('Do you want me to Analyse Tweets Related to Product ?')
  ans = input()
  if 'y' in ans.lower():
    def percentage(part, whole):
      return 100 * float(part)/float(whole)
    consumerKey = "kuEX1FsGcnwHsDaDZnw9SndFv"
    consumerSecret = "dJbrjCnQnpFM9mthb5xDQTEKCyce98rI6De4C7CZDnIavz1wXB"
    accessToken = "1182566068788662273-37me0CKU7DO2t5fsR6rr19IsBQPnKA"
    accessTokenSecret = "eJCvU7APY8kfiwkqSlEfUiyTzV2jyIgMXpZ046YxYztjx"

    auth = tweepy.OAuthHandler(consumer_key=consumerKey, consumer_secret=consumerSecret)
    auth.set_access_token(accessToken, accessTokenSecret)
    api = tweepy.API(auth)

    searchTerm = input("Enter keyword/hashtag to search about :")
    noOfSearchTerms = int(input("Enter number of tweets to analyze :"))


    tweets = tweepy.Cursor(api.search , q=searchTerm, lang="English").items(noOfSearchTerms)


    positive = 0
    negative = 0
    neutral = 0
    polarity = 0

    for tweet in tweets:
      # print(tweet.text)
        analysis = TextBlob(tweet.text)
        polarity += analysis.sentiment.polarity

        if(analysis.sentiment.polarity == 0):
           neutral  += 1
        elif(analysis.sentiment.polarity < 0):
          negative += 1
        elif(analysis.sentiment.polarity > 0):
          positive += 1

    positive = percentage(positive, noOfSearchTerms)
    negative = percentage(negative, noOfSearchTerms)
    neutral = percentage(neutral, noOfSearchTerms)
    neutral = percentage(polarity, noOfSearchTerms)

    positive = format(positive, '2f')
    negative = format(negative, '2f')
    neutral = format(neutral, '2f')


    print("How many people are reacting on"+ searchTerm +"by analyzing"+ str(noOfSearchTerms)+ "Tweets.")

    if(polarity == 0):
        print("Neutral")
    elif(polarity < 0):
        print("Negative")
    elif(polarity > 0):
        print("Positive")

    labels = ['Positive['+str(positive)+'%]','Neutral ['+ str(neutral)+'%]','Negative['+ str(negative)+'%]']
    sizes = [positive, neutral, negative]
    colors = ['yellowgreen','gold','red']
    patches, texts = plt.pie(sizes, colors=colors, startangle=90)
    plt.legend(patches, labels, loc="best")
    plt.title('How the people are reacting on'+searchTerm+'by analyzing'+str(noOfSearchTerms)+'Tweets.')
    plt.axis('equal')
    plt.tight_layout()
    plt.show()

#5. Random goodbye 

goodbyes = [
'Good talking to you ' + nickname + 'I gotta go now',
'OK I am bored, I will go watch Netflix',
'Bye bye Im Tired now , I am out',
'Im in Hurry . . . I gotta go now Thx for Your Time',
'Talk to you later, '+ nickname
]
print(random.choice(goodbyes))